plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.protobuf'  apply false
}

ext["grpcVersion"] = "1.39.0" // need to wait for grpc kotlin to move past this
ext["grpcKotlinVersion"] = "1.2.0" // CURRENT_GRPC_KOTLIN_VERSION
ext["protobufVersion"] = "3.18.1"
ext["coroutinesVersion"] = "1.5.2"

android {
    compileSdk 31

    compileOptions{
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }


        defaultConfig {
        applicationId "com.example.synclient"
        minSdk 29
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            /*
            * Sceneform is available for the following ABIs: arm64-v8a, armv7a,
            * x86_64 and x86. This sample app enables arm64-v8a to run on
            * devices and x86 to run on the emulator. Your application should
            * list the ABIs most appropriate to minimize APK size (arm64-v8a recommended).
            */
            abiFilters 'arm64-v8a', 'x86'
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    configurations {
        implementation.exclude module:'protobuf-lite'
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }



}
kapt {
    correctErrorTypes true
}


/*
protobuf{
    protoc{artefact='com.google.protobuf:protoc:3.19.1'}
    plugins{
        javalite{artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"}
        grpc{artifact = 'io.grpc:protoc-gen-grpc-java:1.20.0'}
    }
    generateProtoTasks{
        all().each{task ->
            task.plugins{
                javalite{}
                grpc{
                    option 'lite'
                }
            }
        }
    }

}

 */



dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'com.google.ar:core:1.28.0'
    implementation 'de.javagl:obj:0.3.0'
    implementation ("com.gorisse.thomas.sceneform:sceneform:1.20.1")
    implementation 'com.google.protobuf:protobuf-java:3.19.1'
    implementation 'com.google.protobuf:protobuf-kotlin:3.19.1'
    //implementation "javax.annotation:javax.annotation-api:$javaxAnnotationVersion"

    implementation 'io.grpc:grpc-okhttp:1.42.1'
    //implementation 'io.grpc:grpc-protobuf-lite:1.42.1'
    implementation 'io.grpc:grpc-stub:1.42.1'
    //implementation 'io.grpc:grpc-protobuf:1.42.1'
    implementation 'com.google.protobuf:protobuf-java-util:3.19.1'

    implementation 'io.grpc:grpc-netty-shaded:1.42.1'
    implementation("io.grpc:grpc-kotlin-stub:1.2.0")
    //implementation 'jakarta.annotation:jakarta.annotation-api:1.3.5'

    // Provides ArFragment, and other UX resources.
    //implementation 'com.google.ar.sceneform.ux:sceneform-ux:1.15.0'

}

/*
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:1.39.1"
    }
    plugins {
        id("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:1.39.0"
        }
        id("grpckt") {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:1.39.0"
        }
    }
    generateProtoTasks {
        all().forEach {
            it.plugins {
                id("grpc")
                id("grpckt")
            }
            it.builtins {
                id("kotlin")
            }
        }
    }
}

 */


/*
protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:1.39.0' }
    plugins {
        grpc { artifact = 'io.grpc:protoc-gen-grpc-java:1.39.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { option 'lite' }
            }
            task.plugins {
                grpc {
                    option 'lite' }
            }
        }
    }
}

 */

/*
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${rootProject.ext["protobufVersion"]}"
    }
    plugins {
        id("java") {
            artifact = "io.grpc:protoc-gen-grpc-java:${rootProject.ext["grpcVersion"]}"
        }
        id("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:${rootProject.ext["grpcVersion"]}"
        }
        id("grpckt") {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:${rootProject.ext["grpcKotlinVersion"]}:jdk7@jar"
        }
    }
    generateProtoTasks {
        all().forEach {
            it.plugins {
                id("java") {
                    option("lite")
                }
                id("grpc") {
                    option("lite")
                }
                id("grpckt") {
                    option("lite")
                }
            }
            it.builtins {
                id("kotlin") {
                    option("lite")
                }
            }
        }
    }
}

 */