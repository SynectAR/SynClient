plugins {
    id 'com.google.protobuf' version "0.8.11"
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
}


android {
    compileSdk 31

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    sourceSets {
        main {

            java {
                srcDirs 'build/generated/source/proto/main/grpc'
                srcDirs 'build/generated/source/proto/main/java'
            }
        }
    }

    packagingOptions {
        resources.excludes.add("META-INF/*")
    }


    defaultConfig {
        applicationId "com.example.synclient"
        minSdk 29
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        ndk {
            /*
            * Sceneform is available for the following ABIs: arm64-v8a, armv7a,
            * x86_64 and x86. This sample app enables arm64-v8a to run on
            * devices and x86 to run on the emulator. Your application should
            * list the ABIs most appropriate to minimize APK size (arm64-v8a recommended).
            */
            abiFilters 'arm64-v8a', 'x86'
        }
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    configurations {
        implementation.exclude module: 'protobuf-lite'
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }


}
kapt {
    correctErrorTypes true
}


dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'com.google.ar:core:1.28.0'

    implementation 'de.javagl:obj:0.3.0'
    implementation "com.gorisse.thomas.sceneform:sceneform:1.20.1"
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.11.1'
    implementation group: 'io.grpc', name: 'grpc-all', version: '1.25.0'
    implementation group: 'io.grpc', name: 'grpc-services', version: '1.28.0'
    implementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.11.1'
    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'


}


protobuf {
    protoc {
        artifact ='com.google.protobuf:protoc:3.11.2'
    }
    plugins {
        grpc{
            artifact='io.grpc:protoc-gen-grpc-java:1.25.0'
        }
    }
    generateProtoTasks
            {
                all()*.plugins{
                    grpc{}
                }
            }
}
/*
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.19.1"
    }
    plugins {
        id("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:1.42.1"
        }
        id("grpckt") {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:1.42.1:jdk7@jar"
        }
    }
    generateProtoTasks {
        all().forEach {
            it.plugins {
                id("grpc")
                id("grpckt")
            }
            it.builtins {
                id("kotlin")
            }
        }
    }
}

 */

/*
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.12.0"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:1.30.0"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove javanano
                java {
                    option 'lite'
                }
            }

            task.plugins {
                grpc {
                    // Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}

 */
/*
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:1.39.1"
    }
    plugins {
        id("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:1.39.0"
        }
        id("grpckt") {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:1.39.0"
        }
    }
    generateProtoTasks {
        all().forEach {
            it.plugins {
                id("grpc")
                id("grpckt")
            }
            it.builtins {
                id("kotlin")
            }
        }
    }
}

 */


/*
protobuf {
    protoc { artifact = 'com.google.protobuf:protoc:1.39.0' }
    plugins {
        grpc { artifact = 'io.grpc:protoc-gen-grpc-java:1.39.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { option 'lite' }
            }
            task.plugins {
                grpc {
                    option 'lite' }
            }
        }
    }
}

 */

/*
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${rootProject.ext["protobufVersion"]}"
    }
    plugins {
        id("java") {
            artifact = "io.grpc:protoc-gen-grpc-java:${rootProject.ext["grpcVersion"]}"
        }
        id("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:${rootProject.ext["grpcVersion"]}"
        }
        id("grpckt") {
            artifact = "io.grpc:protoc-gen-grpc-kotlin:${rootProject.ext["grpcKotlinVersion"]}:jdk7@jar"
        }
    }
    generateProtoTasks {
        all().forEach {
            it.plugins {
                id("java") {
                    option("lite")
                }
                id("grpc") {
                    option("lite")
                }
                id("grpckt") {
                    option("lite")
                }
            }
            it.builtins {
                id("kotlin") {
                    option("lite")
                }
            }
        }
    }
}

 */